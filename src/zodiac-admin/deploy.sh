#!/bin/bash

# Script de deployment para Vercel
# Zodiac Admin - Panel de administraci√≥n Vue.js

echo "üöÄ Iniciando deployment de Zodiac Admin a Vercel..."

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar errores
error() {
    echo -e "${RED}‚ùå Error: $1${NC}"
    exit 1
}

# Funci√≥n para mostrar √©xito
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Funci√≥n para mostrar info
info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Funci√≥n para mostrar advertencias
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Verificar que estamos en el directorio correcto
if [ ! -f "package.json" ]; then
    error "No se encontr√≥ package.json. Ejecuta este script desde la ra√≠z del proyecto."
fi

# Verificar que Node.js est√© instalado
if ! command -v node &> /dev/null; then
    error "Node.js no est√° instalado. Inst√°lalo desde https://nodejs.org/"
fi

# Verificar que npm est√© instalado
if ! command -v npm &> /dev/null; then
    error "npm no est√° instalado."
fi

info "Verificando versiones..."
echo "Node.js: $(node --version)"
echo "npm: $(npm --version)"

# Instalar dependencias si no existen
if [ ! -d "node_modules" ]; then
    info "Instalando dependencias..."
    npm install || error "Fallo al instalar dependencias"
    success "Dependencias instaladas"
else
    info "Verificando dependencias actualizadas..."
    npm ci || warning "Algunas dependencias pueden estar desactualizadas"
fi

# Verificar si Vercel CLI est√° instalado
if ! command -v vercel &> /dev/null; then
    warning "Vercel CLI no est√° instalado. Instalando..."
    npm install -g vercel || error "No se pudo instalar Vercel CLI"
    success "Vercel CLI instalado"
fi

# Construir el proyecto para verificar que no hay errores
info "Construyendo proyecto para verificaci√≥n..."
npm run build || error "Fallo en el build del proyecto"
success "Build exitoso"

# Verificar archivos de configuraci√≥n
info "Verificando configuraci√≥n de Vercel..."

if [ ! -f "vercel.json" ]; then
    error "No se encontr√≥ vercel.json. Este archivo es necesario para el deployment."
fi

if [ ! -f ".env.production" ]; then
    warning ".env.production no encontrado. Recuerda configurar las variables de entorno en Vercel Dashboard."
fi

success "Configuraci√≥n verificada"

# Preguntar por el tipo de deployment
echo ""
echo "Selecciona el tipo de deployment:"
echo "1) Preview (desarrollo/testing)"
echo "2) Production (sitio final)"
read -p "Ingresa tu opci√≥n (1 o 2): " deploy_type

case $deploy_type in
    1)
        info "Iniciando deployment Preview..."
        vercel --confirm || error "Fallo el deployment Preview"
        success "Deployment Preview completado"
        ;;
    2)
        info "Iniciando deployment Production..."
        vercel --prod --confirm || error "Fallo el deployment Production"
        success "Deployment Production completado"
        ;;
    *)
        error "Opci√≥n inv√°lida. Selecciona 1 o 2."
        ;;
esac

echo ""
success "üéâ Deployment completado exitosamente!"
echo ""
info "Pr√≥ximos pasos:"
echo "1. Configura VITE_API_BASE_URL en Vercel Dashboard con la URL de tu API"
echo "2. Verifica que tu API tenga CORS configurado para el dominio de Vercel"
echo "3. Prueba todas las funcionalidades en el entorno de producci√≥n"
echo ""
info "Panel de Vercel: https://vercel.com/dashboard"
echo ""
echo -e "${GREEN}¬°Zodiac Admin est√° listo en producci√≥n! üöÄ${NC}"